<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ping.homeschool.dao.UserDao">

    <select id="countUser" resultType="Integer">
        SELECT count(0)
        FROM user u
        WHERE u.delete_status = '1'
    </select>

    <resultMap id="userMap" type="com.ping.homeschool.util.model.One2Many">
        <id column="userId" property="userId"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="nickname" property="nickname"/>
        <result column="phone" property="phone"/>
        <result column="email" property="email"/>
        <result column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <result column="deleteStatus" property="deleteStatus"/>
        <collection property="permissionList" ofType="String">
            <id column="permissionName" property="permissionName"/>
        </collection>
    </resultMap>
    <select id="listUser" resultMap="userMap">
        SELECT
            u.*,
            r.role_name                            roleName,
            CONCAT(p.menu_name, p.permission_name) permissionName
        FROM (
                 SELECT
                     user_id                                      userId,
                     username                                username,
                     password                                password,
                     nickname                                nickname,
                     phone                                   phone,
                     email                                   email,
                     role_id                                 roleId,
                     delete_status                           deleteStatus
                 FROM user
                 WHERE delete_status = '1'
                 ORDER BY user_id
                 LIMIT #{offSet}, #{pageRow}
             ) u
            LEFT JOIN role r ON r.role_id = u.roleId
            LEFT JOIN role_permission_relation rp ON rp.role_id = r.role_id
            LEFT JOIN permission p ON p.permission_id = rp.permission_id

        ORDER BY u.userId
    </select>

    <select id="getAllRoles" resultType="com.alibaba.fastjson.JSONObject">
        SELECT
            role_id        roleId,
            role_name roleName
        FROM role
        WHERE delete_status='1'
    </select>

    <insert id="addUser" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO user
        (username, password, nickname, phone, email, role_id) VALUES
            (#{username}, #{password}, #{nickname}, #{phone}, #{email}, #{roleId})
    </insert>

    <update id="updateUser">
        UPDATE user
        SET nickname = #{nickname}, password = #{password}, phone = #{phone}, role_id = #{roleId}, delete_status = #{deleteStatus}
        WHERE user_id = #{userId} and user_id != 20211111
    </update>
    <resultMap id="roleMap" type="com.ping.homeschool.util.model.One2Many">
        <id column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
            <id column="userId" property="userId"/>
            <result column="nickname" property="nickname"/>
        </collection>
        <collection property="menus" ofType="com.ping.homeschool.util.model.One2Many">
            <id column="menuCode" property="menuCode"/>
            <result column="menuName" property="menuName"/>
            <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
                <id column="permissionId" property="permissionId"/>
                <result column="permissionName" property="permissionName"/>
            </collection>
        </collection>
    </resultMap>
    <select id="listRole" resultMap="roleMap">
        SELECT
            r.role_id              roleId,
            r.role_name       roleName,
            u.user_id              userId,
            u.nickname        nickname,
            p.permission_id     permissionId,
            p.menu_code       menuCode,
            p.menu_name       menuName,
            p.permission_name permissionName
        FROM role r
            LEFT JOIN user u ON r.role_id = u.role_id AND u.delete_status = '1'
            LEFT JOIN role_permission_relation rp ON r.role_id = rp.role_id AND rp.delete_status = '1'
            LEFT JOIN permission p ON rp.permission_id = p.permission_id
        WHERE r.delete_status = '1'
        ORDER BY r.role_id, p.permission_id
    </select>
    <resultMap id="permissionMap" type="com.ping.homeschool.util.model.One2Many">
        <id column="menuName" property="menuName"/>
        <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
            <id column="id" property="id"/>
            <result column="permissionName" property="permissionName"/>
            <result column="requiredPerm" property="requiredPerm" javaType="Integer"/>
        </collection>
    </resultMap>
    <select id="listAllPermission" resultMap="permissionMap">
        SELECT
            p.permission_id                  id,
            p.menu_name           menuName,
            p.permission_name     permissionName,
            p.required_permission requiredPerm
        FROM permission p;
    </select>

    <insert id="insertRole" useGeneratedKeys="true" keyProperty="roleId">
        INSERT INTO role
        (role_name)
        VALUES (#{roleName})
    </insert>

    <insert id="insertRolePermission">
        insert into role_permission_relation (role_id, permission_id)
        values
        <foreach collection="permissions" item="item" index="index" separator=",">
            (#{roleId}, #{item})
        </foreach>
    </insert>

    <resultMap id="aRole" type="com.ping.homeschool.util.model.One2Many">
        <id column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
            <id column="userId" property="userId"/>
        </collection>
        <collection property="permissionIds" ofType="Integer">
            <id column="permissionId" property="permissionId"/>
        </collection>
    </resultMap>
    <select id="getRoleAllInfo" resultMap="aRole">
        SELECT
            r.role_id        roleId,
            r.role_name roleName,
            u.user_id        userId,
            p.permission_id        permissionId
        FROM role r
            LEFT JOIN user u ON r.role_id = u.role_id AND u.delete_status = '1'
            LEFT JOIN role_permission_relation rp ON r.role_id = rp.role_id AND rp.delete_status = '1'
            LEFT JOIN permission p ON rp.permission_id = p.permission_id
        WHERE r.role_id = #{roleId}
    </select>

    <update id="removeRole">
        UPDATE role
        SET
            delete_status = '2'
        WHERE role_id = #{roleId} and role_id != 3
    </update>
    <update id="removeRoleAllPermission">
        UPDATE role_permission_relation
        SET
            delete_status = '2'
        WHERE role_id = #{roleId}
    </update>

    <update id="removeOldPermission">
        UPDATE role_permission_relation
        SET
        delete_status = '2'
        WHERE role_id = #{roleId}
        AND permission_id in (
        <foreach collection="permissions" item="item" index="index" separator=",">
            #{item}
        </foreach>
        )
    </update>
    <update id="updateRoleName">
        UPDATE role
        SET
            role_name = #{roleName}
        WHERE role_id = #{roleId}
    </update>
    <select id="queryExistUsername" resultType="int">
        select count(0)
         from user
         WHERE username=#{username}
         AND delete_status='1';
    </select>

    <select id="selectByUsername" resultType="int">
        select count(0)
        from user
        where username = #{username}
    </select>

    <select id="queryByUsername" resultType="com.ping.homeschool.model.User">
        select user_id userId, username, nickname, phone, email, role_id roleId
        from user
        where username = #{username}
    </select>
</mapper>